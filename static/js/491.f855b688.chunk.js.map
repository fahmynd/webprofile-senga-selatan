{"version":3,"file":"static/js/491.f855b688.chunk.js","mappings":"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","sources":["../node_modules/src/.internal/charts/percent/PercentDefaultTheme.ts","../node_modules/src/.internal/charts/percent/PercentChart.ts","../node_modules/src/.internal/charts/pie/PieChart.ts","../node_modules/src/.internal/charts/percent/PercentSeries.ts","../node_modules/d3-shape/src/math.js","../node_modules/d3-shape/src/arc.js","../node_modules/src/.internal/core/render/Slice.ts","../node_modules/src/.internal/core/render/RadialText.ts","../node_modules/src/.internal/core/render/RadialLabel.ts","../node_modules/src/.internal/charts/pie/PieSeries.ts"],"sourcesContent":["import { Theme } from \"../../core/Theme\";\r\nimport { percent, p50, p100 } from \"../../core/util/Percent\";\r\nimport { ColorSet } from \"../../core/util/ColorSet\";\r\nimport { setColor } from \"../../themes/DefaultTheme\";\r\n\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport class PercentDefaultTheme extends Theme {\r\n\tprotected setupDefaultRules() {\r\n\t\tsuper.setupDefaultRules();\r\n\r\n\t\tconst ic = this._root.interfaceColors;\r\n\t\tconst r = this.rule.bind(this);\r\n\r\n\t\t/**\r\n\t\t * ========================================================================\r\n\t\t * charts/percent\r\n\t\t * ========================================================================\r\n\t\t */\r\n\r\n\t\tr(\"PercentSeries\").setAll({\r\n\t\t\tlegendLabelText: \"{category}\",\r\n\t\t\tlegendValueText: \"{valuePercentTotal.formatNumber('0.00p')}\",\r\n\t\t\tcolors: ColorSet.new(this._root, {}),\r\n\t\t\twidth: p100,\r\n\t\t\theight: p100\r\n\t\t});\r\n\r\n\t\t/**\r\n\t\t * ========================================================================\r\n\t\t * charts/pie\r\n\t\t * ========================================================================\r\n\t\t */\r\n\r\n\t\tr(\"PieChart\").setAll({\r\n\t\t\tradius: percent(80),\r\n\t\t\tstartAngle: -90,\r\n\t\t\tendAngle: 270\r\n\t\t})\r\n\r\n\t\tr(\"PieSeries\").setAll({\r\n\t\t\talignLabels: true,\r\n\t\t\tstartAngle: -90,\r\n\t\t\tendAngle: 270\r\n\t\t});\r\n\r\n\t\tr(\"PieSeries\").states.create(\"hidden\", { endAngle: -90, opacity: 0 });\r\n\r\n\t\tr(\"Slice\", [\"pie\"]).setAll({\r\n\t\t\tposition: \"absolute\",\r\n\t\t\tisMeasured: false,\r\n\t\t\tx: 0,\r\n\t\t\ty: 0,\r\n\t\t\ttoggleKey: \"active\",\r\n\t\t\ttooltipText: \"{category}: {valuePercentTotal.formatNumber('0.00p')}\",\r\n\t\t\tstrokeWidth: 1,\r\n\t\t\tstrokeOpacity: 1,\r\n\t\t\trole: \"figure\",\r\n\t\t\tlineJoin:\"round\"\r\n\t\t});\r\n\r\n\t\tr(\"Slice\", [\"pie\"]).states.create(\"active\", { shiftRadius: 20 });\r\n\t\tr(\"Slice\", [\"pie\"]).states.create(\"hoverActive\", { scale: 1 });\r\n\t\tr(\"Slice\", [\"pie\"]).states.create(\"hover\", { scale: 1.04 });\r\n\r\n\t\tr(\"RadialLabel\", [\"pie\"]).setAll({\r\n\t\t\ttextType: \"aligned\",\r\n\t\t\tradius: 10,\r\n\t\t\ttext: \"{category}: {valuePercentTotal.formatNumber('0.00p')}\",\r\n\t\t\tpaddingTop: 5,\r\n\t\t\tpaddingBottom: 5,\r\n\t\t\tpopulateText: true\r\n\t\t});\r\n\r\n\t\tr(\"Tick\", [\"pie\"]).setAll({\r\n\t\t\tlocation: 1\r\n\t\t});\r\n\r\n\r\n\t\t/**\r\n\t\t * ========================================================================\r\n\t\t * charts/funnel\r\n\t\t * ========================================================================\r\n\t\t */\r\n\r\n\t\tr(\"SlicedChart\").setAll({\r\n\t\t\tpaddingLeft: 10,\r\n\t\t\tpaddingRight: 10,\r\n\t\t\tpaddingTop: 10,\r\n\t\t\tpaddingBottom: 10\r\n\t\t});\r\n\r\n\t\t/**\r\n\t\t * ------------------------------------------------------------------------\r\n\t\t * charts/funnel: Funnel\r\n\t\t * ------------------------------------------------------------------------\r\n\t\t */\r\n\r\n\t\tr(\"FunnelSeries\").setAll({\r\n\t\t\tstartLocation: 0,\r\n\t\t\tendLocation: 1,\r\n\t\t\torientation: \"vertical\",\r\n\t\t\talignLabels: true,\r\n\t\t\tsequencedInterpolation: true\r\n\t\t});\r\n\r\n\t\tr(\"FunnelSlice\").setAll({\r\n\t\t\tinteractive: true,\r\n\t\t\texpandDistance: 0,\r\n\t\t\t//tooltipText: \"{category}: {valuePercentTotal.formatNumber('0.00p')}\"\r\n\t\t});\r\n\r\n\t\tr(\"FunnelSlice\").states.create(\"hover\", { expandDistance: 0.15 })\r\n\r\n\t\tr(\"Label\", [\"funnel\"]).setAll({\r\n\t\t\tpopulateText: true,\r\n\t\t\ttext: \"{category}: {valuePercentTotal.formatNumber('0.00p')}\",\r\n\t\t\tcenterY: p50\r\n\t\t});\r\n\r\n\t\tr(\"Label\", [\"funnel\", \"horizontal\"]).setAll({\r\n\t\t\tcenterX: 0,\r\n\t\t\tcenterY: p50,\r\n\t\t\trotation: -90\r\n\t\t});\r\n\r\n\t\t// Class: Label\r\n\t\tr(\"Label\", [\"funnel\", \"vertical\"]).setAll({\r\n\t\t\tcenterY: p50,\r\n\t\t\tcenterX: 0\r\n\t\t});\r\n\r\n\t\tr(\"Tick\", [\"funnel\"]).setAll({\r\n\t\t\tlocation: 1\r\n\t\t});\r\n\r\n\t\tr(\"FunnelSlice\", [\"funnel\", \"link\"]).setAll({\r\n\t\t\tfillOpacity: 0.5,\r\n\t\t\tstrokeOpacity: 0,\r\n\t\t\texpandDistance: -0.1\r\n\t\t});\r\n\r\n\t\tr(\"FunnelSlice\", [\"funnel\", \"link\", \"vertical\"]).setAll({\r\n\t\t\theight: 10,\r\n\t\t});\r\n\r\n\t\tr(\"FunnelSlice\", [\"funnel\", \"link\", \"horizontal\"]).setAll({\r\n\t\t\twidth: 10\r\n\t\t});\r\n\r\n\r\n\t\t/**\r\n\t\t * ------------------------------------------------------------------------\r\n\t\t * charts/funnel: Pyramid\r\n\t\t * ------------------------------------------------------------------------\r\n\t\t */\r\n\r\n\t\tr(\"PyramidSeries\").setAll({\r\n\t\t\tvalueIs: \"area\"\r\n\t\t});\r\n\r\n\t\tr(\"FunnelSlice\", [\"pyramid\", \"link\"]).setAll({\r\n\t\t\tfillOpacity: 0.5\r\n\t\t});\r\n\r\n\t\tr(\"FunnelSlice\", [\"pyramid\", \"link\", \"vertical\"]).setAll({\r\n\t\t\theight: 0\r\n\t\t});\r\n\r\n\t\tr(\"FunnelSlice\", [\"pyramid\", \"link\", \"horizontal\"]).setAll({\r\n\t\t\twidth: 0\r\n\t\t});\r\n\r\n\t\tr(\"FunnelSlice\", [\"pyramid\"]).setAll({\r\n\t\t\tinteractive: true,\r\n\t\t\texpandDistance: 0\r\n\t\t});\r\n\r\n\t\tr(\"FunnelSlice\", [\"pyramid\"]).states.create(\"hover\", { expandDistance: 0.15 });\r\n\r\n\t\tr(\"Label\", [\"pyramid\"]).setAll({\r\n\t\t\tpopulateText: true,\r\n\t\t\ttext: \"{category}: {valuePercentTotal.formatNumber('0.00p')}\",\r\n\t\t\tcenterY: p50\r\n\t\t});\r\n\r\n\t\tr(\"Label\", [\"pyramid\", \"horizontal\"]).setAll({\r\n\t\t\tcenterX: 0,\r\n\t\t\tcenterY: p50,\r\n\t\t\trotation: -90\r\n\t\t});\r\n\r\n\t\tr(\"Label\", [\"pyramid\", \"vertical\"]).setAll({\r\n\t\t\tcenterY: p50,\r\n\t\t\tcenterX: 0\r\n\t\t});\r\n\r\n\t\tr(\"Tick\", [\"pyramid\"]).setAll({\r\n\t\t\tlocation: 1\r\n\t\t});\r\n\r\n\r\n\t\t/**\r\n\t\t * ------------------------------------------------------------------------\r\n\t\t * charts/funnel: Pictorial\r\n\t\t * ------------------------------------------------------------------------\r\n\t\t */\r\n\r\n\t\t// Class: FunnelSlice\r\n\t\tr(\"FunnelSlice\", [\"pictorial\"]).setAll({\r\n\t\t\tinteractive: true,\r\n\t\t\ttooltipText: \"{category}: {valuePercentTotal.formatNumber('0.00p')}\"\r\n\t\t});\r\n\r\n\t\tr(\"Label\", [\"pictorial\"]).setAll({\r\n\t\t\tpopulateText: true,\r\n\t\t\ttext: \"{category}: {valuePercentTotal.formatNumber('0.00p')}\",\r\n\t\t\tcenterY: p50\r\n\t\t});\r\n\r\n\t\tr(\"Label\", [\"pictorial\", \"horizontal\"]).setAll({\r\n\t\t\tcenterX: 0,\r\n\t\t\tcenterY: p50,\r\n\t\t\trotation: -90\r\n\t\t});\r\n\r\n\t\tr(\"Label\", [\"pictorial\", \"vertical\"]).setAll({\r\n\t\t\tcenterY: p50,\r\n\t\t\tcenterX: 0\r\n\t\t});\r\n\r\n\t\tr(\"FunnelSlice\", [\"pictorial\", \"link\"]).setAll({\r\n\t\t\tfillOpacity: 0.5,\r\n\t\t\twidth: 0,\r\n\t\t\theight: 0\r\n\t\t});\r\n\r\n\t\tr(\"Tick\", [\"pictorial\"]).setAll({\r\n\t\t\tlocation: 0.5\r\n\t\t});\r\n\r\n\t\t{\r\n\t\t\tconst rule = r(\"Graphics\", [\"pictorial\", \"background\"]);\r\n\r\n\t\t\trule.setAll({\r\n\t\t\t\tfillOpacity: 0.2\r\n\t\t\t});\r\n\r\n\t\t\tsetColor(rule, \"fill\", ic, \"alternativeBackground\");\r\n\t\t}\r\n\r\n\t}\r\n}\r\n","import type { PercentSeries } from \"./PercentSeries\";\nimport { SerialChart, ISerialChartPrivate, ISerialChartSettings } from \"../../core/render/SerialChart\";\nimport { PercentDefaultTheme } from \"./PercentDefaultTheme\";\n\nexport interface IPercentChartSettings extends ISerialChartSettings {\n}\n\nexport interface IPercentChartPrivate extends ISerialChartPrivate {\n}\n\n/**\n * Base class for [[PieChart]].\n *\n * Also used for percent-based series, like [[FunnelSeries]], [[PyramidSeries]], etc.\n *\n * @important\n */\nexport abstract class PercentChart extends SerialChart {\n\tpublic static className: string = \"PercentChart\";\n\tpublic static classNames: Array<string> = SerialChart.classNames.concat([PercentChart.className]);\n\n\tdeclare public _settings: IPercentChartSettings;\n\tdeclare public _privateSettings: IPercentChartPrivate;\n\tdeclare public _seriesType: PercentSeries;\n\n\tprotected _afterNew() {\n\t\tthis._defaultThemes.push(PercentDefaultTheme.new(this._root));\n\n\t\tsuper._afterNew();\n\n\t\tthis.chartContainer.children.push(this.seriesContainer);\n\t\tthis.seriesContainer.children.push(this.bulletsContainer);\n\t}\n\n\tprotected _processSeries(series: this[\"_seriesType\"]) {\n\t\tsuper._processSeries(series);\n\t\tthis.seriesContainer.children.moveValue(this.bulletsContainer, this.seriesContainer.children.length - 1);\t\n\t}\t\n}\n","import type { PieSeries } from \"./PieSeries\";\n\nimport { Percent } from \"../../core/util/Percent\";\nimport { PercentChart, IPercentChartPrivate, IPercentChartSettings } from \"../percent/PercentChart\";\nimport { p50 } from \"../../core/util/Percent\";\n\nimport * as $utils from \"../../core/util/Utils\";\nimport * as $math from \"../../core/util/Math\";\n\n\nexport interface IPieChartSettings extends IPercentChartSettings {\n\n\t/**\n\t * Outer radius of the pie chart.\n\t *\n\t * Can be set in fixed pixel value, or relative to chart container size in\n\t * percent.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/#Pie_radius} for more info\n\t * @default 80%\n\t */\n\tradius?: number | Percent;\n\n\t/**\n\t * Inner radius of the pie chart. Setting to any non-zero value will result\n\t * in a donut chart.\n\t *\n\t * Can be set in fixed pixel value, or relative to chart container size in\n\t * percent.\n\t *\n\t * Setting to negative number will mean pixels from outer radius.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/#Pie_radius} for more info\n\t */\n\tinnerRadius?: number | Percent;\n\n\t/**\n\t * A start angle of the chart in degrees.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/#Start_end_angles} for more info\n\t * @default -90\n\t */\n\tstartAngle?: number;\n\n\t/**\n\t * An end angle of the chart in degrees.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/#Start_end_angles} for more info\n\t * @default 270\n\t */\n\tendAngle?: number;\n\n}\n\nexport interface IPieChartPrivate extends IPercentChartPrivate {\n\n\t/**\n\t * @ignore\n\t */\n\tirModifyer?: number;\n\n}\n\n/**\n * Creates a pie chart.\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/} for more info\n * @important\n */\nexport class PieChart extends PercentChart {\n\n\tpublic static className: string = \"PieChart\";\n\tpublic static classNames: Array<string> = PercentChart.classNames.concat([PieChart.className]);\n\n\tdeclare public _settings: IPieChartSettings;\n\tdeclare public _privateSettings: IPieChartPrivate;\n\tdeclare public _seriesType: PieSeries;\n\n\tpublic _maxRadius: number = 1;\n\n\tprotected _afterNew() {\n\t\tsuper._afterNew();\n\t\tthis.seriesContainer.setAll({ x: p50, y: p50 });\n\t}\n\n\tpublic _prepareChildren() {\n\t\tsuper._prepareChildren();\n\n\t\tconst chartContainer = this.chartContainer;\n\t\tconst w = chartContainer.innerWidth();\n\t\tconst h = chartContainer.innerHeight();\n\n\t\tconst startAngle = this.get(\"startAngle\", 0);\n\t\tconst endAngle = this.get(\"endAngle\", 0);\n\t\tconst innerRadius = this.get(\"innerRadius\");\n\n\n\t\tlet bounds = $math.getArcBounds(0, 0, startAngle, endAngle, 1);\n\n\t\tconst wr = w / (bounds.right - bounds.left);\n\t\tconst hr = h / (bounds.bottom - bounds.top);\n\n\t\tlet innerBounds = { left: 0, right: 0, top: 0, bottom: 0 };\n\n\t\tif (innerRadius instanceof Percent) {\n\t\t\tlet value = innerRadius.value;\n\t\t\tlet mr = Math.min(wr, hr);\n\t\t\tvalue = Math.max(mr * value, mr - Math.min(h, w)) / mr;\n\t\t\tinnerBounds = $math.getArcBounds(0, 0, startAngle, endAngle, value);\n\t\t\tthis.setPrivateRaw(\"irModifyer\", value / innerRadius.value);\n\t\t}\n\n\t\tbounds = $math.mergeBounds([bounds, innerBounds]);\n\n\t\tconst prevRadius = this._maxRadius;\n\t\tthis._maxRadius = Math.min(wr, hr);\n\n\t\tconst radius = $utils.relativeToValue(this.get(\"radius\", 0), this._maxRadius);\n\t\tthis.seriesContainer.setAll({\n\t\t\tdy: -radius * (bounds.bottom + bounds.top) / 2, dx: -radius * (bounds.right + bounds.left) / 2\n\t\t})\n\n\t\tif (this.isDirty(\"startAngle\") || this.isDirty(\"endAngle\") || prevRadius != this._maxRadius) {\n\t\t\tthis.series.each((series) => {\n\t\t\t\tseries._markDirtyKey(\"startAngle\");\n\t\t\t})\n\t\t}\n\n\t\tif(this.isDirty(\"innerRadius\") || this.isDirty(\"radius\")){\n\t\t\tthis.series.each((series) => {\n\t\t\t\tseries._markDirtyKey(\"innerRadius\");\n\t\t\t})\t\t\t\n\t\t}\n\t}\n\n\t/**\n\t * Returns outer radius in pixels.\n\t *\n\t * If optional series parameter is passed in, it will return outer radius\n\t * of that particular series.\n\t *\n\t * @param   series  Series\n\t * @return          Radius in pixels\n\t */\n\tpublic radius(series?: PieSeries): number {\n\n\t\tlet radius = $utils.relativeToValue(this.get(\"radius\", 0), this._maxRadius);\n\t\tlet innerRadius = $utils.relativeToValue(this.get(\"innerRadius\", 0), radius);\n\n\t\tif (series) {\n\t\t\tlet index = this.series.indexOf(series);\n\t\t\tlet length = this.series.length;\n\n\t\t\tlet seriesRadius = series.get(\"radius\");\n\t\t\tif (seriesRadius != null) {\n\t\t\t\treturn innerRadius + $utils.relativeToValue(seriesRadius, radius - innerRadius);\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn innerRadius + (radius - innerRadius) / length * (index + 1);\n\t\t\t}\n\t\t}\n\t\treturn radius;\n\t}\n\n\t/**\n\t * Returns inner radius in pixels.\n\t *\n\t * If optional series parameter is passed in, it will return inner radius\n\t * of that particular series.\n\t *\n\t * @param   series  Series\n\t * @return          Radius in pixels\n\t */\n\tpublic innerRadius(series?: PieSeries): number {\n\t\tconst radius = this.radius();\n\t\tlet innerRadius = $utils.relativeToValue(this.get(\"innerRadius\", 0), radius);\n\n\t\tif (innerRadius < 0) {\n\t\t\tinnerRadius = radius + innerRadius;\n\t\t}\n\n\t\tif (series) {\n\t\t\tlet index = this.series.indexOf(series);\n\t\t\tlet length = this.series.length;\n\n\t\t\tlet seriesInnerRadius = series.get(\"innerRadius\");\n\t\t\tif (seriesInnerRadius != null) {\n\t\t\t\treturn innerRadius + $utils.relativeToValue(seriesInnerRadius, radius - innerRadius);\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn innerRadius + (radius - innerRadius) / length * index;\n\t\t\t}\n\t\t}\n\t\treturn innerRadius;\n\t}\n}\n","import type { DataItem } from \"../../core/render/Component\";\nimport type { Graphics } from \"../../core/render/Graphics\";\nimport type { Label } from \"../../core/render/Label\";\nimport type { Tick } from \"../../core/render/Tick\";\nimport type { ListTemplate } from \"../../core/util/List\";\nimport type { ColorSet } from \"../../core/util/ColorSet\";\nimport type { ILegendDataItem } from \"../../core/render/Legend\";\nimport type { Color } from \"../../core/util/Color\";\nimport type { PercentChart } from \"./PercentChart\";\n\nimport { Series, ISeriesSettings, ISeriesDataItem, ISeriesPrivate } from \"../../core/render/Series\";\nimport { Container } from \"../../core/render/Container\";\nimport { visualSettings } from \"../../core/render/Graphics\";\n\nimport * as $array from \"../../core/util/Array\";\nimport * as $type from \"../../core/util/Type\";\n\nexport interface IPercentSeriesDataItem extends ISeriesDataItem {\n\n\t/**\n\t * Percent of the series value total.\n\t */\n\tvaluePercentTotal: number;\n\n\t/**\n\t * Category.\n\t */\n\tcategory: string;\n\n\t/**\n\t * Slice visual element.\n\t */\n\tslice: Graphics;\n\n\t/**\n\t * Slice label.\n\t */\n\tlabel: Label;\n\n\t/**\n\t * Slice tick.\n\t */\n\ttick: Tick;\n\n\t/**\n\t * A related legend data item.\n\t */\n\tlegendDataItem: DataItem<ILegendDataItem>;\n\n\t/**\n\t * Fill color used for the slice and related elements, e.g. legend marker.\n\t */\n\tfill: Color;\n\n}\n\n//type IPercentSeriesDataItemSettings = { [K in keyof IPercentSeriesDataItem]?: string; };\n\nexport interface IPercentSeriesSettings extends ISeriesSettings {\n\n\t/**\n\t * A [[ColorSet]] to use when asigning colors for slices.\n\t */\n\tcolors?: ColorSet;\n\n\t/**\n\t * A field in data that holds category names.\n\t */\n\tcategoryField?: string;\n\n\t/**\n\t * Should slice labels be aligned in columns/rows?\n\t */\n\talignLabels?: boolean;\n\n\t/**\n\t * A field that holds color for slice fill.\n\t */\n\tfillField?: string;\n\n}\n\nexport interface IPercentSeriesPrivate extends ISeriesPrivate {\n\n\t/**\n\t * Calculate average value in series.\n\t */\n\tvalueAverage?: number;\n\n\t/**\n\t * Count of items in series.\n\t */\n\tvalueCount?: number;\n\n\t/**\n\t * Sum of values in series.\n\t */\n\tvalueSum?: number;\n\n\t/**\n\t * Sum of all absolute values in series.\n\t */\n\tvalueAbsoluteSum?: number;\n\n\t/**\n\t * Lowest value in series.\n\t */\n\tvalueLow?: number;\n\n\t/**\n\t * Highest value in series.\n\t */\n\tvalueHigh?: number;\n\n}\n\n/**\n * A base class for any percent chart series.\n */\nexport abstract class PercentSeries extends Series {\n\tpublic static className: string = \"PercentSeries\";\n\tpublic static classNames: Array<string> = Series.classNames.concat([PercentSeries.className]);\n\n\tdeclare public _settings: IPercentSeriesSettings;\n\tdeclare public _privateSettings: IPercentSeriesPrivate;\n\tdeclare public _dataItemSettings: IPercentSeriesDataItem;\n\n\tdeclare public _sliceType: Graphics;\n\tdeclare public _labelType: Label;\n\tdeclare public _tickType: Tick;\n\n\tpublic readonly slicesContainer = this.children.push(Container.new(this._root, { position: \"absolute\", isMeasured: false }));\n\tpublic readonly labelsContainer = this.children.push(Container.new(this._root, { position: \"absolute\", isMeasured: false }));\n\tpublic readonly ticksContainer = this.children.push(Container.new(this._root, { position: \"absolute\", isMeasured: false }));\n\n\tprotected _lLabels: Array<{ label: Label, y: number }> = [];\n\tprotected _rLabels: Array<{ label: Label, y: number }> = [];\n\tprotected _hLabels: Array<{ label: Label, y: number }> = [];\n\n\t/**\n\t * A [[ListTemplate]] of all slices in series.\n\t *\n\t * `slices.template` can also be used to configure slices.\n\t */\n\tpublic readonly slices: ListTemplate<this[\"_sliceType\"]> = this._makeSlices();\n\n\tprotected abstract _makeSlices(): ListTemplate<this[\"_sliceType\"]>;\n\n\tpublic abstract chart: PercentChart | undefined;\n\n\t/**\n\t * @ignore\n\t */\n\tpublic makeSlice(dataItem: DataItem<this[\"_dataItemSettings\"]>): this[\"_sliceType\"] {\n\t\tconst slice = this.slicesContainer.children.push(this.slices.make());\n\n\t\tslice.on(\"fill\", () => {\n\t\t\tthis.updateLegendMarker(dataItem);\n\t\t})\n\n\t\tslice.on(\"stroke\", () => {\n\t\t\tthis.updateLegendMarker(dataItem);\n\t\t})\n\n\t\tslice._setDataItem(dataItem);\n\t\tdataItem.set(\"slice\", slice);\n\t\tthis.slices.push(slice);\n\n\t\treturn slice;\n\t}\n\n\t/**\n\t * A [[ListTemplate]] of all slice labels in series.\n\t *\n\t * `labels.template` can also be used to configure slice labels.\n\t */\n\tpublic readonly labels: ListTemplate<this[\"_labelType\"]> = this._makeLabels();\n\n\tprotected abstract _makeLabels(): ListTemplate<this[\"_labelType\"]>;\n\n\t/**\n\t * @ignore\n\t */\n\tpublic makeLabel(dataItem: DataItem<this[\"_dataItemSettings\"]>): this[\"_labelType\"] {\n\t\tconst label = this.labelsContainer.children.push(this.labels.make());\n\t\tlabel._setDataItem(dataItem);\n\t\tdataItem.set(\"label\", label);\n\t\tthis.labels.push(label);\n\t\treturn label;\n\t}\n\n\t/**\n\t * A [[ListTemplate]] of all slice ticks in series.\n\t *\n\t * `ticks.template` can also be used to configure slice ticks.\n\t */\n\tpublic readonly ticks: ListTemplate<this[\"_tickType\"]> = this._makeTicks();\n\n\tprotected abstract _makeTicks(): ListTemplate<this[\"_tickType\"]>;\n\n\n\tprotected _shouldMakeBullet(dataItem: DataItem<this[\"_dataItemSettings\"]>): boolean {\n\t\tif (dataItem.get(\"value\") != null) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic makeTick(dataItem: DataItem<this[\"_dataItemSettings\"]>): this[\"_tickType\"] {\n\t\tconst tick = this.ticksContainer.children.push(this.ticks.make());\n\t\ttick._setDataItem(dataItem);\n\t\tdataItem.set(\"tick\", tick);\n\t\tthis.ticks.push(tick);\n\t\treturn tick;\n\t}\n\n\tprotected _afterNew() {\n\t\tthis.fields.push(\"category\", \"fill\");\n\t\tsuper._afterNew();\n\t}\n\n\tprotected _onDataClear() {\n\t\tconst colors = this.get(\"colors\");\n\t\tif (colors) {\n\t\t\tcolors.reset();\n\t\t}\n\t}\n\n\tpublic _prepareChildren() {\n\t\tsuper._prepareChildren();\n\n\t\tthis._lLabels = [];\n\t\tthis._rLabels = [];\n\t\tthis._hLabels = [];\n\n\t\tif (this._valuesDirty) {\n\t\t\tlet sum = 0;\n\t\t\tlet absSum = 0;\n\t\t\tlet valueHigh = 0;\n\t\t\tlet valueLow = Infinity;\n\t\t\tlet count = 0;\n\t\t\t$array.each(this._dataItems, (dataItem) => {\n\t\t\t\tlet valueWorking = dataItem.get(\"valueWorking\", 0);\n\t\t\t\tsum += valueWorking;\n\t\t\t\tabsSum += Math.abs(valueWorking);\n\t\t\t});\n\n\t\t\t$array.each(this._dataItems, (dataItem) => {\n\t\t\t\tlet value = dataItem.get(\"valueWorking\", 0);\n\t\t\t\tif (value >= absSum) {\n\t\t\t\t\tsum = dataItem.get(\"value\", 0);\n\t\t\t\t}\n\n\t\t\t\tif (value > valueHigh) {\n\t\t\t\t\tvalueHigh = value;\n\t\t\t\t}\n\n\t\t\t\tif (value < valueLow) {\n\t\t\t\t\tvalueLow = value;\n\t\t\t\t}\n\n\t\t\t\tcount++;\n\n\t\t\t\tlet percentTotal = value / absSum;\n\n\t\t\t\tif (absSum == 0) {\n\t\t\t\t\tpercentTotal = 0;\n\t\t\t\t}\n\n\t\t\t\tdataItem.setRaw(\"valuePercentTotal\", percentTotal * 100);\n\t\t\t});\n\n\t\t\tthis.setPrivateRaw(\"valueLow\", valueLow);\n\t\t\tthis.setPrivateRaw(\"valueHigh\", valueHigh);\n\t\t\tthis.setPrivateRaw(\"valueSum\", sum);\n\t\t\tthis.setPrivateRaw(\"valueAverage\", sum / count);\n\t\t\tthis.setPrivateRaw(\"valueAbsoluteSum\", absSum);\n\t\t}\n\t}\n\n\t/**\n\t * Shows hidden series.\n\t *\n\t * @param   duration  Animation duration in milliseconds\n\t * @return            Animation promise\n\t */\n\tpublic async show(duration?: number): Promise<void> {\n\t\tlet promises: Array<Promise<any>> = [];\n\t\tpromises.push(super.show(duration))\n\n\t\tpromises.push(this._sequencedShowHide(true, duration));\n\t\tawait Promise.all(promises);\n\t}\n\n\t/**\n\t * Hide whole series.\n\t *\n\t * @param   duration  Animation duration in milliseconds\n\t * @return            Animation promise\n\t */\n\tpublic async hide(duration?: number): Promise<void> {\n\t\tlet promises: Array<Promise<any>> = [];\n\t\tpromises.push(super.hide(duration))\n\n\t\tpromises.push(this._sequencedShowHide(false, duration));\n\t\tawait Promise.all(promises);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic _updateChildren() {\n\t\tsuper._updateChildren();\n\t\tif (this._valuesDirty) {\n\t\t\t$array.each(this._dataItems, (dataItem) => {\n\t\t\t\tdataItem.get(\"label\").text.markDirtyText();\n\t\t\t});\n\t\t}\n\n\t\tif (this.isDirty(\"legendLabelText\") || this.isDirty(\"legendValueText\")) {\n\t\t\t$array.each(this._dataItems, (dataItem) => {\n\t\t\t\tthis.updateLegendValue(dataItem);\n\t\t\t});\n\t\t}\n\n\t\tthis._arrange();\n\t}\n\n\tprotected _arrange() {\n\t\tthis._arrangeDown(this._lLabels);\n\t\tthis._arrangeUp(this._lLabels);\n\n\t\tthis._arrangeDown(this._rLabels);\n\t\tthis._arrangeUp(this._rLabels);\n\n\t\tthis._arrangeLeft(this._hLabels);\n\t\tthis._arrangeRight(this._hLabels);\n\n\t\t$array.each(this.dataItems, (dataItem) => {\n\t\t\tthis._updateTick(dataItem);\n\t\t})\n\t}\n\n\n\tpublic _afterChanged() {\n\t\tsuper._afterChanged();\n\t\tthis._arrange();\n\t}\n\n\tprotected processDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tsuper.processDataItem(dataItem);\n\n\t\tif (dataItem.get(\"fill\") == null) {\n\t\t\tlet colors = this.get(\"colors\");\n\t\t\tif (colors) {\n\t\t\t\tdataItem.setRaw(\"fill\", colors.next());\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Shows series's data item.\n\t *\n\t * @param   dataItem  Data item\n\t * @param   duration  Animation duration in milliseconds\n\t * @return            Promise\n\t */\n\tpublic async showDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>, duration?: number): Promise<void> {\n\t\tconst promises = [super.showDataItem(dataItem, duration)];\n\t\tif (!$type.isNumber(duration)) {\n\t\t\tduration = this.get(\"stateAnimationDuration\", 0);\n\t\t}\n\n\t\tconst easing = this.get(\"stateAnimationEasing\");\n\n\t\tlet value = dataItem.get(\"value\");\n\n\t\tconst animation = dataItem.animate({ key: \"valueWorking\", to: value, duration: duration, easing: easing });\n\t\tif (animation) {\n\t\t\tpromises.push(animation.waitForStop());\n\t\t}\n\n\t\tconst tick = dataItem.get(\"tick\");\n\t\tif (tick) {\n\t\t\tpromises.push(tick.show(duration));\n\t\t}\n\t\tconst label = dataItem.get(\"label\");\n\t\tif (label) {\n\t\t\tpromises.push(label.show(duration));\n\t\t}\n\n\t\tconst slice = dataItem.get(\"slice\");\n\t\tif (slice) {\n\t\t\tpromises.push(slice.show(duration));\n\t\t}\n\n\t\tif(slice.get(\"active\")){\n\t\t\tslice.states.applyAnimate(\"active\");\n\t\t}\n\n\t\tawait Promise.all(promises);\n\t}\n\n\t/**\n\t * Hides series's data item.\n\t *\n\t * @param   dataItem  Data item\n\t * @param   duration  Animation duration in milliseconds\n\t * @return            Promise\n\t */\n\tpublic async hideDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>, duration?: number): Promise<void> {\n\t\tconst promises = [super.hideDataItem(dataItem, duration)];\n\t\tconst hiddenState = this.states.create(\"hidden\", {})\n\n\t\tif (!$type.isNumber(duration)) {\n\t\t\tduration = hiddenState.get(\"stateAnimationDuration\", this.get(\"stateAnimationDuration\", 0));\n\t\t}\n\n\t\tconst easing = hiddenState.get(\"stateAnimationEasing\", this.get(\"stateAnimationEasing\"));\n\n\t\tconst animation = dataItem.animate({ key: \"valueWorking\", to: 0, duration: duration, easing: easing });\n\t\tif (animation) {\n\t\t\tpromises.push(animation.waitForStop());\n\t\t}\n\n\t\tconst tick = dataItem.get(\"tick\");\n\t\tif (tick) {\n\t\t\tpromises.push(tick.hide(duration));\n\t\t}\n\t\tconst label = dataItem.get(\"label\");\n\t\tif (label) {\n\t\t\tpromises.push(label.hide(duration));\n\t\t}\n\n\t\tconst slice = dataItem.get(\"slice\");\n\t\tslice.hideTooltip();\n\n\t\tif (slice) {\n\t\t\tpromises.push(slice.hide(duration));\n\t\t}\n\n\t\tawait Promise.all(promises);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic disposeDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tsuper.disposeDataItem(dataItem);\n\t\tlet label = dataItem.get(\"label\");\n\t\tif (label) {\n\t\t\tthis.labels.removeValue(label);\n\t\t\tlabel.dispose();\n\t\t}\n\t\tlet tick = dataItem.get(\"tick\");\n\t\tif (tick) {\n\t\t\tthis.ticks.removeValue(tick);\n\t\t\ttick.dispose();\n\t\t}\n\t\tlet slice = dataItem.get(\"slice\");\n\t\tif (slice) {\n\t\t\tthis.slices.removeValue(slice);\n\t\t\tslice.dispose();\n\t\t}\n\t}\n\n\t/**\n\t * Triggers hover on a series data item.\n\t *\n\t * @since 5.0.7\n\t * @param  dataItem  Target data item\n\t */\n\tpublic hoverDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tconst slice = dataItem.get(\"slice\");\n\t\tif (slice && !slice.isHidden()) {\n\t\t\tslice.hover();\n\t\t}\n\t}\n\n\t/**\n\t * Triggers un-hover on a series data item.\n\t *\n\t * @since 5.0.7\n\t * @param  dataItem  Target data item\n\t */\n\tpublic unhoverDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tconst slice = dataItem.get(\"slice\");\n\t\tif (slice) {\n\t\t\tslice.unhover();\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateLegendMarker(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tconst slice = dataItem.get(\"slice\");\n\n\t\tif (slice) {\n\t\t\tconst legendDataItem = dataItem.get(\"legendDataItem\");\n\t\t\tif (legendDataItem) {\n\t\t\t\tconst markerRectangle = legendDataItem.get(\"markerRectangle\");\n\t\t\t\t$array.each(visualSettings, (setting: any) => {\n\t\t\t\t\tif (slice.get(setting) != null) {\n\t\t\t\t\t\tmarkerRectangle.set(setting, slice.get(setting));\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _arrangeDown(labels?: Array<{ label: Label, y: number }>) {\n\t\tif (labels) {\n\n\t\t\tlet next = this._getNextDown();\n\n\t\t\tlabels.sort((a, b) => {\n\t\t\t\tif (a.y > b.y) {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\telse if (a.y < b.y) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t})\n\n\t\t\t$array.each(labels, (l) => {\n\t\t\t\tconst bounds = l.label.adjustedLocalBounds();\n\t\t\t\tlet labelTop = bounds.top;\n\t\t\t\tif (l.y + labelTop < next) {\n\t\t\t\t\tl.y = next - labelTop;\n\t\t\t\t}\n\t\t\t\tl.label.set(\"y\", l.y);\n\n\t\t\t\tnext = l.y + bounds.bottom;\n\t\t\t})\n\t\t}\n\t}\n\n\tprotected _getNextUp() {\n\t\treturn this.labelsContainer.maxHeight();\n\t}\n\n\tprotected _getNextDown() {\n\t\treturn 0;\n\t}\n\n\tprotected _arrangeUp(labels?: Array<{ label: Label, y: number }>) {\n\t\tif (labels) {\n\t\t\tlet next = this._getNextUp();\n\n\t\t\tlabels.sort((a, b) => {\n\t\t\t\tif (a.y < b.y) {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\telse if (a.y > b.y) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t})\n\n\t\t\t$array.each(labels, (l) => {\n\t\t\t\tconst bounds = l.label.adjustedLocalBounds();\n\t\t\t\tlet labelBottom = bounds.bottom;\n\t\t\t\tif (l.y + labelBottom > next) {\n\t\t\t\t\tl.y = next - labelBottom;\n\t\t\t\t}\n\t\t\t\tl.label.set(\"y\", l.y);\n\t\t\t\tnext = l.y + bounds.top;\n\t\t\t})\n\t\t}\n\t}\n\n\tprotected _arrangeRight(labels?: Array<{ label: Label, y: number }>) {\n\t\tif (labels) {\n\n\t\t\tlet next = 0;\n\n\t\t\tlabels.sort((a, b) => {\n\t\t\t\tif (a.y > b.y) {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\telse if (a.y < b.y) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t})\n\n\t\t\t$array.each(labels, (l) => {\n\t\t\t\tconst bounds = l.label.adjustedLocalBounds();\n\t\t\t\tlet labelLeft = bounds.left;\n\t\t\t\tif (l.y + labelLeft < next) {\n\t\t\t\t\tl.y = next - labelLeft;\n\t\t\t\t}\n\t\t\t\tl.label.set(\"x\", l.y);\n\n\t\t\t\tnext = l.y + bounds.right;\n\t\t\t})\n\t\t}\n\t}\n\n\tprotected _arrangeLeft(labels?: Array<{ label: Label, y: number }>) {\n\t\tif (labels) {\n\t\t\tlet next = this.labelsContainer.maxWidth();\n\n\t\t\tlabels.sort((a, b) => {\n\t\t\t\tif (a.y < b.y) {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\telse if (a.y > b.y) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t})\n\n\t\t\t$array.each(labels, (l) => {\n\t\t\t\tconst bounds = l.label.adjustedLocalBounds();\n\t\t\t\tlet labelRight = bounds.right;\n\t\t\t\tif (l.y + labelRight > next) {\n\t\t\t\t\tl.y = next - labelRight;\n\t\t\t\t}\n\t\t\t\tl.label.set(\"x\", l.y);\n\t\t\t\tnext = l.y + bounds.left;\n\t\t\t})\n\t\t}\n\t}\n\n\tpublic _updateSize() {\n\t\tsuper._updateSize();\n\t\tthis.markDirty();\n\t}\n\n\tprotected _updateTick(_dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\n\t}\n\n\tprotected _dispose() {\n\t\tsuper._dispose();\n\n\t\tconst chart = this.chart;\n\t\tif (chart) {\n\t\t\tchart.series.removeValue(this);\n\t\t}\n\t}\n\n\n}\n","export const abs = Math.abs;\nexport const atan2 = Math.atan2;\nexport const cos = Math.cos;\nexport const max = Math.max;\nexport const min = Math.min;\nexport const sin = Math.sin;\nexport const sqrt = Math.sqrt;\n\nexport const epsilon = 1e-12;\nexport const pi = Math.PI;\nexport const halfPi = pi / 2;\nexport const tau = 2 * pi;\n\nexport function acos(x) {\n  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);\n}\n\nexport function asin(x) {\n  return x >= 1 ? halfPi : x <= -1 ? -halfPi : Math.asin(x);\n}\n","import {path} from \"d3-path\";\nimport constant from \"./constant.js\";\nimport {abs, acos, asin, atan2, cos, epsilon, halfPi, max, min, pi, sin, sqrt, tau} from \"./math.js\";\n\nfunction arcInnerRadius(d) {\n  return d.innerRadius;\n}\n\nfunction arcOuterRadius(d) {\n  return d.outerRadius;\n}\n\nfunction arcStartAngle(d) {\n  return d.startAngle;\n}\n\nfunction arcEndAngle(d) {\n  return d.endAngle;\n}\n\nfunction arcPadAngle(d) {\n  return d && d.padAngle; // Note: optional!\n}\n\nfunction intersect(x0, y0, x1, y1, x2, y2, x3, y3) {\n  var x10 = x1 - x0, y10 = y1 - y0,\n      x32 = x3 - x2, y32 = y3 - y2,\n      t = y32 * x10 - x32 * y10;\n  if (t * t < epsilon) return;\n  t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / t;\n  return [x0 + t * x10, y0 + t * y10];\n}\n\n// Compute perpendicular offset line of length rc.\n// http://mathworld.wolfram.com/Circle-LineIntersection.html\nfunction cornerTangents(x0, y0, x1, y1, r1, rc, cw) {\n  var x01 = x0 - x1,\n      y01 = y0 - y1,\n      lo = (cw ? rc : -rc) / sqrt(x01 * x01 + y01 * y01),\n      ox = lo * y01,\n      oy = -lo * x01,\n      x11 = x0 + ox,\n      y11 = y0 + oy,\n      x10 = x1 + ox,\n      y10 = y1 + oy,\n      x00 = (x11 + x10) / 2,\n      y00 = (y11 + y10) / 2,\n      dx = x10 - x11,\n      dy = y10 - y11,\n      d2 = dx * dx + dy * dy,\n      r = r1 - rc,\n      D = x11 * y10 - x10 * y11,\n      d = (dy < 0 ? -1 : 1) * sqrt(max(0, r * r * d2 - D * D)),\n      cx0 = (D * dy - dx * d) / d2,\n      cy0 = (-D * dx - dy * d) / d2,\n      cx1 = (D * dy + dx * d) / d2,\n      cy1 = (-D * dx + dy * d) / d2,\n      dx0 = cx0 - x00,\n      dy0 = cy0 - y00,\n      dx1 = cx1 - x00,\n      dy1 = cy1 - y00;\n\n  // Pick the closer of the two intersection points.\n  // TODO Is there a faster way to determine which intersection to use?\n  if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;\n\n  return {\n    cx: cx0,\n    cy: cy0,\n    x01: -ox,\n    y01: -oy,\n    x11: cx0 * (r1 / r - 1),\n    y11: cy0 * (r1 / r - 1)\n  };\n}\n\nexport default function() {\n  var innerRadius = arcInnerRadius,\n      outerRadius = arcOuterRadius,\n      cornerRadius = constant(0),\n      padRadius = null,\n      startAngle = arcStartAngle,\n      endAngle = arcEndAngle,\n      padAngle = arcPadAngle,\n      context = null;\n\n  function arc() {\n    var buffer,\n        r,\n        r0 = +innerRadius.apply(this, arguments),\n        r1 = +outerRadius.apply(this, arguments),\n        a0 = startAngle.apply(this, arguments) - halfPi,\n        a1 = endAngle.apply(this, arguments) - halfPi,\n        da = abs(a1 - a0),\n        cw = a1 > a0;\n\n    if (!context) context = buffer = path();\n\n    // Ensure that the outer radius is always larger than the inner radius.\n    if (r1 < r0) r = r1, r1 = r0, r0 = r;\n\n    // Is it a point?\n    if (!(r1 > epsilon)) context.moveTo(0, 0);\n\n    // Or is it a circle or annulus?\n    else if (da > tau - epsilon) {\n      context.moveTo(r1 * cos(a0), r1 * sin(a0));\n      context.arc(0, 0, r1, a0, a1, !cw);\n      if (r0 > epsilon) {\n        context.moveTo(r0 * cos(a1), r0 * sin(a1));\n        context.arc(0, 0, r0, a1, a0, cw);\n      }\n    }\n\n    // Or is it a circular or annular sector?\n    else {\n      var a01 = a0,\n          a11 = a1,\n          a00 = a0,\n          a10 = a1,\n          da0 = da,\n          da1 = da,\n          ap = padAngle.apply(this, arguments) / 2,\n          rp = (ap > epsilon) && (padRadius ? +padRadius.apply(this, arguments) : sqrt(r0 * r0 + r1 * r1)),\n          rc = min(abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments)),\n          rc0 = rc,\n          rc1 = rc,\n          t0,\n          t1;\n\n      // Apply padding? Note that since r1 ≥ r0, da1 ≥ da0.\n      if (rp > epsilon) {\n        var p0 = asin(rp / r0 * sin(ap)),\n            p1 = asin(rp / r1 * sin(ap));\n        if ((da0 -= p0 * 2) > epsilon) p0 *= (cw ? 1 : -1), a00 += p0, a10 -= p0;\n        else da0 = 0, a00 = a10 = (a0 + a1) / 2;\n        if ((da1 -= p1 * 2) > epsilon) p1 *= (cw ? 1 : -1), a01 += p1, a11 -= p1;\n        else da1 = 0, a01 = a11 = (a0 + a1) / 2;\n      }\n\n      var x01 = r1 * cos(a01),\n          y01 = r1 * sin(a01),\n          x10 = r0 * cos(a10),\n          y10 = r0 * sin(a10);\n\n      // Apply rounded corners?\n      if (rc > epsilon) {\n        var x11 = r1 * cos(a11),\n            y11 = r1 * sin(a11),\n            x00 = r0 * cos(a00),\n            y00 = r0 * sin(a00),\n            oc;\n\n        // Restrict the corner radius according to the sector angle.\n        if (da < pi && (oc = intersect(x01, y01, x00, y00, x11, y11, x10, y10))) {\n          var ax = x01 - oc[0],\n              ay = y01 - oc[1],\n              bx = x11 - oc[0],\n              by = y11 - oc[1],\n              kc = 1 / sin(acos((ax * bx + ay * by) / (sqrt(ax * ax + ay * ay) * sqrt(bx * bx + by * by))) / 2),\n              lc = sqrt(oc[0] * oc[0] + oc[1] * oc[1]);\n          rc0 = min(rc, (r0 - lc) / (kc - 1));\n          rc1 = min(rc, (r1 - lc) / (kc + 1));\n        }\n      }\n\n      // Is the sector collapsed to a line?\n      if (!(da1 > epsilon)) context.moveTo(x01, y01);\n\n      // Does the sector’s outer ring have rounded corners?\n      else if (rc1 > epsilon) {\n        t0 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);\n        t1 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);\n\n        context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01);\n\n        // Have the corners merged?\n        if (rc1 < rc) context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw);\n\n        // Otherwise, draw the two corners and the ring.\n        else {\n          context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);\n          context.arc(0, 0, r1, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), !cw);\n          context.arc(t1.cx, t1.cy, rc1, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);\n        }\n      }\n\n      // Or is the outer ring just a circular arc?\n      else context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw);\n\n      // Is there no inner ring, and it’s a circular sector?\n      // Or perhaps it’s an annular sector collapsed due to padding?\n      if (!(r0 > epsilon) || !(da0 > epsilon)) context.lineTo(x10, y10);\n\n      // Does the sector’s inner ring (or point) have rounded corners?\n      else if (rc0 > epsilon) {\n        t0 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);\n        t1 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);\n\n        context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01);\n\n        // Have the corners merged?\n        if (rc0 < rc) context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw);\n\n        // Otherwise, draw the two corners and the ring.\n        else {\n          context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);\n          context.arc(0, 0, r0, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), cw);\n          context.arc(t1.cx, t1.cy, rc0, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);\n        }\n      }\n\n      // Or is the inner ring just a circular arc?\n      else context.arc(0, 0, r0, a10, a00, cw);\n    }\n\n    context.closePath();\n\n    if (buffer) return context = null, buffer + \"\" || null;\n  }\n\n  arc.centroid = function() {\n    var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2,\n        a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - pi / 2;\n    return [cos(a) * r, sin(a) * r];\n  };\n\n  arc.innerRadius = function(_) {\n    return arguments.length ? (innerRadius = typeof _ === \"function\" ? _ : constant(+_), arc) : innerRadius;\n  };\n\n  arc.outerRadius = function(_) {\n    return arguments.length ? (outerRadius = typeof _ === \"function\" ? _ : constant(+_), arc) : outerRadius;\n  };\n\n  arc.cornerRadius = function(_) {\n    return arguments.length ? (cornerRadius = typeof _ === \"function\" ? _ : constant(+_), arc) : cornerRadius;\n  };\n\n  arc.padRadius = function(_) {\n    return arguments.length ? (padRadius = _ == null ? null : typeof _ === \"function\" ? _ : constant(+_), arc) : padRadius;\n  };\n\n  arc.startAngle = function(_) {\n    return arguments.length ? (startAngle = typeof _ === \"function\" ? _ : constant(+_), arc) : startAngle;\n  };\n\n  arc.endAngle = function(_) {\n    return arguments.length ? (endAngle = typeof _ === \"function\" ? _ : constant(+_), arc) : endAngle;\n  };\n\n  arc.padAngle = function(_) {\n    return arguments.length ? (padAngle = typeof _ === \"function\" ? _ : constant(+_), arc) : padAngle;\n  };\n\n  arc.context = function(_) {\n    return arguments.length ? ((context = _ == null ? null : _), arc) : context;\n  };\n\n  return arc;\n}\n","import { Graphics, IGraphicsSettings, IGraphicsPrivate } from \"./Graphics\";\nimport * as $type from \"../util/Type\";\nimport { Percent } from \"../util/Percent\";\nimport type { IPoint } from \"../util/IPoint\";\nimport { arc } from \"d3-shape\";\nimport * as $math from \"../util/Math\";\n\nexport interface ISliceSettings extends IGraphicsSettings {\n\n\t/**\n\t * Radius in pixels.\n\t */\n\tradius?: number;\n\n\t/**\n\t * Slice \"width\" in degrees.\n\t */\n\tarc?: number;\n\n\t/**\n\t * Inner radius of the slice in pixels.\n\t */\n\tinnerRadius?: number;\n\n\t/**\n\t * Start angle in degrees.\n\t */\n\tstartAngle?: number;\n\n\t/**\n\t * Slice corner radius in pixels.\n\t */\n\tcornerRadius?: number;\n\n\t/**\n\t * Slice \"pull out\" radius in pixels.\n\t */\n\tshiftRadius?: number;\n\n\t/**\n\t * Number of pixels to add to whatever slice's `radius` value is. Negative\n\t * numbers can also be used.\n\t */\n\tdRadius?: number;\n\n\t/**\n\t * Number of pixels to add to whatever slice's `innerRadius` value is.\n\t * Negative numbers can also be used.\n\t */\n\tdInnerRadius?: number;\n\n}\n\nexport interface ISlicePrivate extends IGraphicsPrivate {\n}\n\n/**\n * Draws a slice shape.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info\n */\nexport class Slice extends Graphics {\n\n\tdeclare public _settings: ISliceSettings;\n\tdeclare public _privateSettings: ISlicePrivate;\n\n\tpublic static className: string = \"Slice\";\n\tpublic static classNames: Array<string> = Graphics.classNames.concat([Slice.className]);\n\n\t/**\n\t * @ignore\n\t */\n\tpublic ix: number = 0;\n\n\t/**\n\t * @ignore\n\t */\n\tpublic iy: number = 0;\n\n\tprotected _generator = arc();\n\n\tpublic _getTooltipPoint(): IPoint {\n\t\tlet tooltipX = this.get(\"tooltipX\");\n\t\tlet tooltipY = this.get(\"tooltipY\");\n\n\t\tlet x = 0;\n\t\tlet y = 0;\n\n\t\tif ($type.isNumber(tooltipX)) {\n\t\t\tx = tooltipX;\n\t\t}\n\n\t\tif ($type.isNumber(tooltipY)) {\n\t\t\ty = tooltipY;\n\t\t}\n\n\t\tlet radius = this.get(\"radius\", 0);\n\t\tlet innerRadius = this.get(\"innerRadius\", 0);\n\n\t\tlet dRadius = this.get(\"dRadius\", 0);\n\t\tlet dInnerRadius = this.get(\"dInnerRadius\", 0);\n\n\t\tradius += dRadius;\n\t\tinnerRadius += dInnerRadius;\n\n\t\tif (innerRadius < 0) {\n\t\t\tinnerRadius = radius + innerRadius;\n\t\t}\n\n\t\tif (tooltipX instanceof Percent) {\n\t\t\tx = this.ix * (innerRadius + (radius - innerRadius) * tooltipX.value)\n\t\t}\n\n\t\tif (tooltipY instanceof Percent) {\n\t\t\ty = this.iy * (innerRadius + (radius - innerRadius) * tooltipY.value)\n\t\t}\n\n\t\tif (this.get(\"arc\") >= 360 && innerRadius == 0) {\n\t\t\tx = 0;\n\t\t\ty = 0;\n\t\t}\n\n\n\t\treturn { x, y };\n\t}\n\tpublic _beforeChanged() {\n\t\tsuper._beforeChanged();\n\n\t\tif (this.isDirty(\"radius\") || this.isDirty(\"arc\") || this.isDirty(\"innerRadius\") || this.isDirty(\"startAngle\") || this.isDirty(\"dRadius\") || this.isDirty(\"dInnerRadius\") || this.isDirty(\"cornerRadius\")) {\n\t\t\tthis._clear = true;\n\t\t}\n\t}\n\n\tpublic _changed() {\n\t\tsuper._changed();\n\n\t\tif (this._clear) {\n\t\t\tlet startAngle = this.get(\"startAngle\", 0);\n\t\t\tlet arc = this.get(\"arc\", 0);\n\t\t\tconst generator = this._generator;\n\n\t\t\tif(arc < 0){\n\t\t\t\tstartAngle = startAngle + arc;\n\t\t\t\tarc = arc * -1;\n\t\t\t}\n\n\t\t\tif(arc > 0.1){ // this fixes bug with full circle when arc is very small\n\t\t\t\tgenerator.cornerRadius(this.get(\"cornerRadius\", 0));\n\t\t\t}\n\t\t\tgenerator.context(this._display as any);\n\n\t\t\tlet radius = this.get(\"radius\", 0);\n\t\t\tlet innerRadius = this.get(\"innerRadius\", 0);\n\n\t\t\tlet dRadius = this.get(\"dRadius\", 0);\n\t\t\tlet dInnerRadius = this.get(\"dInnerRadius\", 0);\n\n\t\t\tradius += dRadius;\n\t\t\tinnerRadius += dInnerRadius;\t\t\t\n\n\t\t\tif (innerRadius < 0) {\n\t\t\t\tinnerRadius = radius + innerRadius;\n\t\t\t}\n\n\t\t\tgenerator({ innerRadius: innerRadius, outerRadius: radius, startAngle: (startAngle + 90) * $math.RADIANS, endAngle: (startAngle + arc + 90) * $math.RADIANS });\n\n\t\t\tlet middleAngle = startAngle + arc / 2;\n\n\t\t\tthis.ix = $math.cos(middleAngle);\n\t\t\tthis.iy = $math.sin(middleAngle);\n\t\t}\n\n\t\tif (this.isDirty(\"shiftRadius\")) {\n\t\t\tconst shiftRadius = this.get(\"shiftRadius\", 0);\n\t\t\tthis.setRaw(\"dx\", this.ix * shiftRadius);\n\t\t\tthis.setRaw(\"dy\", this.iy * shiftRadius);\n\t\t\tthis.markDirtyPosition();\n\t\t}\n\t}\n}\n","import { Text, ITextSettings, ITextPrivate } from \"./Text\";\nimport * as $math from \"../util/Math\";\nimport type { IRadialText } from \"./backend/Renderer\";\n\n/**\n * @ignore\n */\nexport interface IRadialTextSettings extends ITextSettings {\n\ttextType?: \"regular\" | \"circular\" | \"radial\" | \"aligned\" | \"adjusted\";\n\tradius?: number;\n\tstartAngle?: number;\n\tinside?: boolean;\n\torientation?: \"inward\" | \"outward\" | \"auto\";\n\tkerning?: number;\n}\n\n/**\n * @ignore\n */\nexport interface IRadialTextPrivate extends ITextPrivate {\n}\n\n/**\n * @ignore\n */\nexport class RadialText extends Text {\n\n\tdeclare public _settings: IRadialTextSettings;\n\tdeclare public _privateSettings: IRadialTextPrivate;\n\n\tpublic _display: IRadialText = this._root._renderer.makeRadialText(\"\", this.textStyle);\n\n\tprotected _afterNew() {\n\t\tsuper._afterNew();\n\t}\n\n\tpublic static className: string = \"RadialText\";\n\tpublic static classNames: Array<string> = Text.classNames.concat([RadialText.className]);\n\n\tpublic _beforeChanged() {\n\t\tsuper._beforeChanged();\n\n\t\tthis._display.clear();\n\n\t\tif (this.isDirty(\"textType\")) {\n\t\t\tthis._display.textType = this.get(\"textType\");\n\t\t\tthis.markDirtyBounds();\n\t\t}\n\n\t\tif (this.isDirty(\"radius\")) {\n\t\t\tthis._display.radius = this.get(\"radius\");\n\t\t\tthis.markDirtyBounds();\n\t\t}\n\n\t\tif (this.isDirty(\"startAngle\")) {\n\t\t\tthis._display.startAngle = (this.get(\"startAngle\", 0)! + 90) * $math.RADIANS;\n\t\t\tthis.markDirtyBounds();\n\t\t}\n\n\t\tif (this.isDirty(\"inside\")) {\n\t\t\tthis._display.inside = this.get(\"inside\");\n\t\t\tthis.markDirtyBounds();\n\t\t}\n\n\t\tif (this.isDirty(\"orientation\")) {\n\t\t\tthis._display.orientation = this.get(\"orientation\");\n\t\t\tthis.markDirtyBounds();\n\t\t}\n\n\t\tif (this.isDirty(\"kerning\")) {\n\t\t\tthis._display.kerning = this.get(\"kerning\");\n\t\t\tthis.markDirtyBounds();\n\t\t}\n\t}\n\n}\n","// import * as $object from \"../util/Object\";\nimport { p50, Percent } from \"../util/Percent\";\nimport { Label, ILabelPrivate, ILabelSettings } from \"./Label\";\nimport { RadialText } from \"./RadialText\";\n\nimport * as $math from \"../util/Math\";\nimport * as $utils from \"../util/Utils\";\n\n\nexport interface IRadialLabelSettings extends ILabelSettings {\n\n\t/**\n\t * Pixel value to adjust radius with.\n\t *\n\t * Will add to (or subtract from if negative) whatever value `baseRadius` evaluates\n\t * to.\n\t */\n\tradius?: number;\n\n\t/**\n\t * Radius of the label's position.\n\t *\n\t * Can be either set in absolute pixel value, or percent.\n\t *\n\t * Relative value, depending on the situation, will most often mean its\n\t * position within certain circular object, like a slice: 0% meaning inner\n\t * edge, and 100% - the outer edge.\n\t *\n\t * @default 100%\n\t */\n\tbaseRadius?: number | Percent;\n\n\t/**\n\t * Label anngle in degrees.\n\t *\n\t * In most cases it will be set by the chart/series and does not need to\n\t * be set manually.\n\t */\n\tlabelAngle?: number;\n\n\t/**\n\t * Should the text \"face\" inward or outward from the arc the text is\n\t * following.\n\t *\n\t * `\"auto\"` means that facing will be chosen automatically based on the angle\n\t * to enhance readbility.\n\t *\n\t * Only applies if `type = \"circluar\"`.\n\t * \n\t * @default \"auto\"\n\t */\n\torientation?: \"inward\" | \"outward\" | \"auto\";\n\n\t/**\n\t * Should label be drawn inside (`true`) or outside (`false`) the arc.\n\t *\n\t * @default false\n\t */\n\tinside?: boolean;\n\n\t/**\n\t * Label type.\n\t *\n\t * * `\"regular\"` (default) - normal horizontal label.\n\t * * `\"circular\"` - arched label.\n\t * * `\"radial\"` - label radiating from the center of the arc.\n\t * * `\"aligned\"` - horizontal label aligned with other labels horizontally.\n\t * * `\"adjusted\"` - horizontal label adjusted in postion.\n\t *\n\t * @default \"regular\"\n\t */\n\ttextType?: \"regular\" | \"circular\" | \"radial\" | \"aligned\" | \"adjusted\";\n\n\t/**\n\t * Extra spacing between characters, in pixels.\n\t *\n\t * @default 0\n\t */\n\tkerning?: number;\n\n}\n\nexport interface IRadialLabelPrivate extends ILabelPrivate {\n\n\t/**\n\t * @ignore\n\t */\n\tleft?: boolean;\n\n\t/**\n\t * @ignore\n\t */\n\tradius?: number;\n\n\t/**\n\t * @ignore\n\t */\n\tinnerRadius?: number;\n\n}\n\nexport class RadialLabel extends Label {\n\n\tdeclare public _settings: IRadialLabelSettings;\n\tdeclare public _privateSettings: IRadialLabelPrivate;\n\n\tdeclare protected _text: RadialText;\n\n\tpublic static className: string = \"RadialLabel\";\n\tpublic static classNames: Array<string> = Label.classNames.concat([RadialLabel.className]);\n\n\tprotected _flipped: boolean = false;\n\n\tprotected _afterNew() {\n\t\tthis._textKeys.push(\"textType\", \"kerning\");\n\t\tsuper._afterNew();\n\t}\n\n\n\tpublic _makeText() {\n\t\tthis._text = this.children.push(RadialText.new(this._root, {}));\n\t}\n\n\t/**\n\t * Returns base radius in pixels.\n\t * \n\t * @return Base radius\n\t */\n\tpublic baseRadius(): number {\n\t\tconst radiusPrivate = this.getPrivate(\"radius\", 0);\n\t\tconst innerRadiusPrivate = this.getPrivate(\"innerRadius\", 0);\n\t\tconst baseRadius = this.get(\"baseRadius\", 0);\n\t\treturn innerRadiusPrivate + $utils.relativeToValue(baseRadius, radiusPrivate - innerRadiusPrivate);\n\t}\n\n\t/**\n\t * Returns radius adjustment in pixels.\n\t * \n\t * @return Radius\n\t */\n\tpublic radius(): number {\n\t\tconst inside = this.get(\"inside\", false);\n\t\treturn this.baseRadius() + this.get(\"radius\", 0) * (inside ? -1 : 1);\n\t}\n\n\tpublic _updateChildren() {\n\t\tsuper._updateChildren();\n\n\t\tif (this.isDirty(\"baseRadius\") || this.isPrivateDirty(\"radius\") || this.isPrivateDirty(\"innerRadius\") || this.isDirty(\"labelAngle\") || this.isDirty(\"radius\") || this.isDirty(\"inside\") || this.isDirty(\"orientation\") || this.isDirty(\"textType\")) {\n\n\t\t\tconst textType = this.get(\"textType\", \"adjusted\");\n\n\t\t\tconst inside = this.get(\"inside\", false);\n\n\t\t\tconst orientation = this.get(\"orientation\");\n\t\t\tlet labelAngle = $math.normalizeAngle(this.get(\"labelAngle\", 0));\n\n\t\t\tthis._text.set(\"startAngle\", this.get(\"labelAngle\", 0));\n\t\t\tthis._text.set(\"inside\", inside);\n\n\t\t\tconst sin = $math.sin(labelAngle);\n\t\t\tconst cos = $math.cos(labelAngle);\n\n\t\t\tlet baseRadius = this.baseRadius();\n\t\t\tlet radius = this.radius();\n\n\t\t\tthis._display.angle = 0;\n\n\t\t\tif (textType == \"circular\") {\n\n\t\t\t\tthis.setAll({\n\t\t\t\t\tpaddingTop: 0,\n\t\t\t\t\tpaddingBottom: 0,\n\t\t\t\t\tpaddingLeft: 0,\n\t\t\t\t\tpaddingRight: 0\n\t\t\t\t});\n\n\t\t\t\t// Circular labels are handled and positioned differently\n\n\t\t\t\tthis._text.set(\"orientation\", orientation);\n\t\t\t\tthis._text.set(\"radius\", radius);\n\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (baseRadius == 0) {\n\t\t\t\t\tlabelAngle = 0;\n\t\t\t\t\tradius = 0;\n\t\t\t\t}\n\n\t\t\t\t// Positioning of radial/regular labels are teh same\n\t\t\t\tlet x = radius * cos;\n\t\t\t\tlet y = radius * sin;\n\n\t\t\t\tif (textType == \"radial\") {\n\n\t\t\t\t\tthis.setRaw(\"x\", x);\n\t\t\t\t\tthis.setRaw(\"y\", y);\n\n\t\t\t\t\tif ((labelAngle < 90) || (labelAngle > 270) || orientation != \"auto\") {\n\t\t\t\t\t\tthis._display.angle = labelAngle;// + 90;\n\t\t\t\t\t\tthis._flipped = false;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tthis._display.angle = labelAngle + 180;\n\t\t\t\t\t\tthis._flipped = true;\n\t\t\t\t\t}\n\t\t\t\t\tthis._dirty.rotation = false;\n\t\t\t\t}\n\t\t\t\telse if (textType == \"adjusted\") {\n\t\t\t\t\tthis.setRaw(\"centerX\", p50);\n\t\t\t\t\tthis.setRaw(\"centerY\", p50);\n\t\t\t\t\tthis.setRaw(\"x\", x);\n\t\t\t\t\tthis.setRaw(\"y\", y);\n\t\t\t\t}\n\t\t\t\telse if (textType == \"regular\") {\n\t\t\t\t\tthis.setRaw(\"x\", x);\n\t\t\t\t\tthis.setRaw(\"y\", y);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.markDirtyPosition();\n\t\t\tthis.markDirtyBounds();\n\t\t}\n\t}\n\n\n\tpublic _updatePosition() {\n\n\t\tconst textType = this.get(\"textType\", \"regular\");\n\t\tconst inside = this.get(\"inside\", false);\n\n\t\tlet dx = 0;\n\t\tlet dy = 0;\n\t\tlet labelAngle = this.get(\"labelAngle\", 0);\n\t\tlet bounds = this.localBounds();\n\t\tlet w = bounds.right - bounds.left;\n\t\tlet h = bounds.bottom - bounds.top;\n\n\t\tif (textType == \"radial\") {\n\t\t\tif (this._flipped) {\n\t\t\t\tlet centerX = this.get(\"centerX\");\n\t\t\t\tif (centerX instanceof Percent) {\n\t\t\t\t\tw = w * (1 - centerX.value * 2);\n\t\t\t\t}\n\n\t\t\t\tdx = w * $math.cos(labelAngle);\n\t\t\t\tdy = w * $math.sin(labelAngle);\n\t\t\t}\n\t\t}\n\t\telse if (!inside && textType == \"adjusted\") {\n\t\t\tdx = w / 2 * $math.cos(labelAngle);\n\t\t\tdy = h / 2 * $math.sin(labelAngle);\n\t\t}\n\n\n\t\tthis.setRaw(\"dx\", dx);\n\t\tthis.setRaw(\"dy\", dy);\n\n\t\tsuper._updatePosition();\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic get text(): RadialText {\n\t\treturn this._text;\n\t}\n\n}\n","import type { DataItem } from \"../../core/render/Component\";\nimport type { PieChart } from \"./PieChart\";\n\nimport { PercentSeries, IPercentSeriesSettings, IPercentSeriesDataItem, IPercentSeriesPrivate } from \"../percent/PercentSeries\";\nimport { Template } from \"../../core/util/Template\";\nimport { Slice } from \"../../core/render/Slice\";\nimport { Tick } from \"../../core/render/Tick\";\nimport { RadialLabel } from \"../../core/render/RadialLabel\";\nimport { ListTemplate } from \"../../core/util/List\";\nimport { p100, Percent } from \"../../core/util/Percent\";\nimport type { Bullet } from \"../../core/render/Bullet\";\n\nimport * as $array from \"../../core/util/Array\";\nimport * as $math from \"../../core/util/Math\";\nimport * as $utils from \"../../core/util/Utils\";\n\nexport interface IPieSeriesDataItem extends IPercentSeriesDataItem {\n\tslice: Slice;\n\tlabel: RadialLabel;\n}\n\nexport interface IPieSeriesSettings extends IPercentSeriesSettings {\n\n\t/**\n\t * Radius of the series in pixels or percent.\n\t */\n\tradius?: Percent | number;\n\n\t/**\n\t * Radius of the series in pixels or percent.\n\t *\n\t * Setting to negative number will mean pixels from outer radius.\n\t */\n\tinnerRadius?: Percent | number;\n\n\t/**\n\t * Start angle of the series in degrees.\n\t *\n\t * @default -90\n\t */\n\tstartAngle?: number;\n\n\t/**\n\t * End angle of the series in degrees.\n\t *\n\t * @default 270\n\t */\n\tendAngle?: number;\n\n}\n\nexport interface IPieSeriesPrivate extends IPercentSeriesPrivate {\n\n\t/**\n\t * Actual radius of the series in pixels.\n\t */\n\tradius?: number;\n\n}\n\n/**\n * Creates a series for a [[PieChart]].\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/} for more info\n * @important\n */\nexport class PieSeries extends PercentSeries {\n\n\tdeclare public chart: PieChart | undefined;\n\n\tpublic static className: string = \"PieSeries\";\n\tpublic static classNames: Array<string> = PercentSeries.classNames.concat([PieSeries.className]);\n\n\tdeclare public _settings: IPieSeriesSettings;\n\tdeclare public _privateSettings: IPieSeriesPrivate;\n\tdeclare public _dataItemSettings: IPieSeriesDataItem;\n\n\tdeclare public _sliceType: Slice;\n\tdeclare public _labelType: RadialLabel;\n\n\tprotected _makeSlices(): ListTemplate<this[\"_sliceType\"]> {\n\t\treturn new ListTemplate(\n\t\t\tTemplate.new({}),\n\t\t\t() => Slice._new(this._root, {\n\t\t\t\tthemeTags: $utils.mergeTags(this.slices.template.get(\"themeTags\", []), [\"pie\", \"series\"])\n\t\t\t}, [this.slices.template]),\n\t\t);\n\t}\n\n\tprotected _makeLabels(): ListTemplate<this[\"_labelType\"]> {\n\t\treturn new ListTemplate(\n\t\t\tTemplate.new({}),\n\t\t\t() => RadialLabel._new(this._root, {\n\t\t\t\tthemeTags: $utils.mergeTags(this.labels.template.get(\"themeTags\", []), [\"pie\", \"series\"])\n\t\t\t}, [this.labels.template]),\n\t\t);\n\t}\n\n\tprotected _makeTicks(): ListTemplate<this[\"_tickType\"]> {\n\t\treturn new ListTemplate(\n\t\t\tTemplate.new({}),\n\t\t\t() => Tick._new(this._root, {\n\t\t\t\tthemeTags: $utils.mergeTags(this.ticks.template.get(\"themeTags\", []), [\"pie\", \"series\"])\n\t\t\t}, [this.ticks.template]),\n\t\t);\n\t}\n\n\tprotected processDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tsuper.processDataItem(dataItem);\n\n\t\tconst slice = this.makeSlice(dataItem);\n\n\t\tslice.on(\"scale\", () => {\n\t\t\tthis._updateTick(dataItem);\n\t\t})\n\t\tslice.on(\"shiftRadius\", () => {\n\t\t\tthis._updateTick(dataItem);\n\t\t})\n\t\tslice.events.on(\"positionchanged\", () => {\n\t\t\tthis._updateTick(dataItem);\n\t\t})\n\n\t\tconst label = this.makeLabel(dataItem);\n\n\t\tlabel.events.on(\"positionchanged\", () => {\n\t\t\tthis._updateTick(dataItem);\n\t\t})\n\n\t\tthis.makeTick(dataItem);\n\n\t\tslice.events.on(\"positionchanged\", () => {\n\t\t\tlabel.markDirty();\n\t\t})\n\t}\n\n\tprotected _getNextUp() {\n\t\tconst chart = this.chart;\n\t\tif (chart) {\n\t\t\treturn chart._maxRadius;\n\t\t}\n\t\treturn this.labelsContainer.maxHeight() / 2;\n\t}\n\n\tprotected _getNextDown() {\n\t\tconst chart = this.chart;\n\t\tif (chart) {\n\t\t\treturn -chart._maxRadius;\n\t\t}\n\t\treturn -this.labelsContainer.maxHeight() / 2;\n\n\t}\n\n\tpublic _prepareChildren() {\n\t\tsuper._prepareChildren();\n\t\tconst chart = this.chart;\n\t\tif (chart) {\n\n\t\t\tif (this.isDirty(\"alignLabels\")) {\n\t\t\t\tlet labelsTemplate = this.labels.template;\n\n\t\t\t\tif (this.get(\"alignLabels\")) {\n\t\t\t\t\tlabelsTemplate.set(\"textType\", \"aligned\");\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tlet textType = labelsTemplate.get(\"textType\");\n\t\t\t\t\tif (textType == null || textType == \"aligned\") {\n\t\t\t\t\t\tlabelsTemplate.set(\"textType\", \"adjusted\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tif (this._valuesDirty || this.isDirty(\"radius\") || this.isDirty(\"innerRadius\") || this.isDirty(\"startAngle\") || this.isDirty(\"endAngle\") || this.isDirty(\"alignLabels\")) {\n\t\t\t\tthis.markDirtyBounds();\n\t\t\t\tconst startAngle = this.get(\"startAngle\", chart.get(\"startAngle\", -90));\n\t\t\t\tconst endAngle = this.get(\"endAngle\", chart.get(\"endAngle\", 270));\n\t\t\t\tconst arc = endAngle - startAngle;\n\t\t\t\tlet currentAngle = startAngle;\n\n\t\t\t\tconst radius = chart.radius(this);\n\t\t\t\tthis.setPrivateRaw(\"radius\", radius);\n\t\t\t\tlet innerRadius = chart.innerRadius(this) * chart.getPrivate(\"irModifyer\", 1);\n\n\t\t\t\tif (innerRadius < 0) {\n\t\t\t\t\tinnerRadius = radius + innerRadius;\n\t\t\t\t}\n\n\t\t\t\t//if (radius > 0) {\n\t\t\t\t$array.each(this._dataItems, (dataItem) => {\n\n\t\t\t\t\tthis.updateLegendValue(dataItem);\n\n\t\t\t\t\tlet currentArc = arc * dataItem.get(\"valuePercentTotal\") / 100;\n\t\t\t\t\tconst slice = dataItem.get(\"slice\");\n\t\t\t\t\tif (slice) {\n\t\t\t\t\t\tslice.set(\"radius\", radius);\n\t\t\t\t\t\tslice.set(\"innerRadius\", innerRadius);\n\t\t\t\t\t\tslice.set(\"startAngle\", currentAngle);\n\n\t\t\t\t\t\tslice.set(\"arc\", currentArc);\n\n\t\t\t\t\t\tconst color = dataItem.get(\"fill\");\n\t\t\t\t\t\tslice._setDefault(\"fill\", color);\n\t\t\t\t\t\tslice._setDefault(\"stroke\", color);\n\t\t\t\t\t}\n\n\t\t\t\t\tlet middleAngle = $math.normalizeAngle(currentAngle + currentArc / 2);\n\n\t\t\t\t\tconst label = dataItem.get(\"label\");\n\t\t\t\t\tif (label) {\n\t\t\t\t\t\tlabel.setPrivate(\"radius\", radius);\n\t\t\t\t\t\tlabel.setPrivate(\"innerRadius\", innerRadius);\n\t\t\t\t\t\tlabel.set(\"labelAngle\", middleAngle);\n\n\t\t\t\t\t\tif (label.get(\"textType\") == \"aligned\") {\n\t\t\t\t\t\t\tlet labelRadius = radius + label.get(\"radius\", 0);\n\t\t\t\t\t\t\tlet y = radius * $math.sin(middleAngle);\n\n\t\t\t\t\t\t\tif (middleAngle > 90 && middleAngle <= 270) {\n\t\t\t\t\t\t\t\tif (!label.isHidden() && !label.isHiding()) {\n\t\t\t\t\t\t\t\t\tthis._lLabels.push({ label: label, y: y });\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tlabelRadius *= -1;\n\t\t\t\t\t\t\t\tlabelRadius -= this.labelsContainer.get(\"paddingLeft\", 0);\n\t\t\t\t\t\t\t\tlabel.set(\"centerX\", p100);\n\t\t\t\t\t\t\t\tlabel.setPrivateRaw(\"left\", true);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tif (!label.isHidden() && !label.isHiding()) {\n\t\t\t\t\t\t\t\t\tthis._rLabels.push({ label: label, y: y });\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tlabelRadius += this.labelsContainer.get(\"paddingRight\", 0);\n\t\t\t\t\t\t\t\tlabel.set(\"centerX\", 0);\n\t\t\t\t\t\t\t\tlabel.setPrivateRaw(\"left\", false);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tlabel.set(\"x\", labelRadius);\n\t\t\t\t\t\t\tlabel.set(\"y\", radius * $math.sin(middleAngle));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcurrentAngle += currentArc;\n\t\t\t\t\tthis._updateTick(dataItem);\n\t\t\t\t})\n\t\t\t\t//}\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _updateTick(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tconst tick = dataItem.get(\"tick\");\n\t\tconst label = dataItem.get(\"label\");\n\t\tconst slice = dataItem.get(\"slice\");\n\t\tconst location = tick.get(\"location\", 1);\n\t\tif (tick && label && slice) {\n\t\t\tconst radius = (slice.get(\"shiftRadius\", 0) + slice.get(\"radius\", 0)) * slice.get(\"scale\", 1) * location;\n\t\t\tconst labelAngle = label.get(\"labelAngle\", 0);\n\t\t\tconst cos = $math.cos(labelAngle);\n\t\t\tconst sin = $math.sin(labelAngle);\n\n\t\t\tconst labelsContainer = this.labelsContainer;\n\t\t\tconst pl = labelsContainer.get(\"paddingLeft\", 0);\n\t\t\tconst pr = labelsContainer.get(\"paddingRight\", 0);\n\n\t\t\tlet x = 0;\n\t\t\tlet y = 0;\n\n\t\t\tx = label.x();\n\t\t\ty = label.y();\n\n\t\t\tif (label.get(\"textType\") == \"circular\") {\n\t\t\t\tconst labelRadius = label.radius() - label.get(\"paddingBottom\", 0);\n\t\t\t\tconst labelAngle = label.get(\"labelAngle\", 0);\n\t\t\t\tx = labelRadius * $math.cos(labelAngle);\n\t\t\t\ty = labelRadius * $math.sin(labelAngle);\n\t\t\t}\n\n\t\t\tlet dx = -pr;\n\t\t\tif (label.getPrivate(\"left\")) {\n\t\t\t\tdx = pl;\n\t\t\t}\n\n\t\t\ttick.set(\"points\", [{ x: slice.x() + radius * cos, y: slice.y() + radius * sin }, { x: x + dx, y: y }, { x: x, y: y }]);\n\t\t}\n\t}\n\n\tpublic _positionBullet(bullet: Bullet) {\n\n\t\tconst sprite = bullet.get(\"sprite\");\n\t\tif (sprite) {\n\t\t\tconst dataItem = sprite.dataItem as DataItem<this[\"_dataItemSettings\"]>;\n\t\t\tconst slice = dataItem.get(\"slice\");\n\n\t\t\tif (slice) {\n\t\t\t\tconst innerRadius = slice.get(\"innerRadius\", 0);\n\t\t\t\tconst radius = slice.get(\"radius\", 0);\n\t\t\t\tconst startAngle = slice.get(\"startAngle\", 0);\n\t\t\t\tconst arc = slice.get(\"arc\", 0);\n\t\t\t\tconst locationX = bullet.get(\"locationX\", 0.5);\n\t\t\t\tconst locationY = bullet.get(\"locationY\", 0.5);\n\n\t\t\t\tconst angle = startAngle + arc * locationX;\n\t\t\t\tconst r = innerRadius + (radius - innerRadius) * locationY;\n\n\t\t\t\tsprite.setAll({ x: $math.cos(angle) * r, y: $math.sin(angle) * r });\n\t\t\t}\n\t\t}\n\t}\n}\n"],"names":["__extends","_super","setupDefaultRules","call","ic","this","_root","interfaceColors","r","rule","bind","setAll","legendLabelText","legendValueText","colors","ColorSet","width","p100","height","radius","percent","startAngle","endAngle","alignLabels","states","create","opacity","position","isMeasured","x","y","toggleKey","tooltipText","strokeWidth","strokeOpacity","role","lineJoin","shiftRadius","scale","textType","text","paddingTop","paddingBottom","populateText","location","paddingLeft","paddingRight","startLocation","endLocation","orientation","sequencedInterpolation","interactive","expandDistance","centerY","p50","centerX","rotation","fillOpacity","valueIs","setColor","Theme","_defaultThemes","push","PercentDefaultTheme","_afterNew","chartContainer","children","seriesContainer","bulletsContainer","series","_processSeries","moveValue","length","Object","SerialChart","PercentChart","className","_prepareChildren","w","innerWidth","h","innerHeight","get","innerRadius","bounds","$math","wr","right","left","hr","bottom","top","innerBounds","Percent","value","mr","Math","min","max","setPrivateRaw","prevRadius","_maxRadius","$utils","dy","dx","isDirty","each","_markDirtyKey","index","indexOf","length_1","seriesRadius","length_2","seriesInnerRadius","classNames","concat","PieChart","_this","Container","_makeSlices","_makeLabels","_makeTicks","dataItem","slice","slicesContainer","slices","make","on","updateLegendMarker","_setDataItem","set","label","labelsContainer","labels","tick","ticksContainer","ticks","fields","reset","_lLabels","_rLabels","_hLabels","_valuesDirty","sum_1","absSum_1","valueHigh_1","valueLow_1","Infinity","count_1","$array","_dataItems","valueWorking","abs","percentTotal","setRaw","duration","promises","show","_sequencedShowHide","Promise","all","_a","hide","_updateChildren","markDirtyText","updateLegendValue","_arrange","_arrangeDown","_arrangeUp","_arrangeLeft","_arrangeRight","dataItems","_updateTick","_afterChanged","processDataItem","next","showDataItem","$type","easing","animation","animate","key","to","waitForStop","applyAnimate","hideDataItem","hiddenState","hideTooltip","disposeDataItem","removeValue","dispose","isHidden","hover","unhover","legendDataItem","markerRectangle_1","visualSettings","setting","next_1","_getNextDown","sort","a","b","l","adjustedLocalBounds","labelTop","maxHeight","next_2","_getNextUp","labelBottom","next_3","labelLeft","next_4","maxWidth","labelRight","_updateSize","markDirty","_dataItem","_dispose","chart","Series","PercentSeries","atan2","cos","sin","sqrt","epsilon","pi","PI","halfPi","tau","acos","asin","arcInnerRadius","d","arcOuterRadius","outerRadius","arcStartAngle","arcEndAngle","arcPadAngle","padAngle","intersect","x0","y0","x1","y1","x2","y2","x3","y3","x10","y10","x32","y32","t","cornerTangents","r1","rc","cw","x01","y01","lo","ox","oy","x11","y11","x00","y00","d2","D","cx0","cy0","cx1","cy1","dx0","dy0","dx1","dy1","cx","cy","cornerRadius","constant","padRadius","context","arc","buffer","r0","apply","arguments","a0","a1","da","path","moveTo","t0","t1","a01","a11","a00","a10","da0","da1","ap","rp","rc0","rc1","p0","p1","oc","ax","ay","bx","by","kc","lc","lineTo","closePath","centroid","_","tooltipX","tooltipY","ix","iy","_beforeChanged","_clear","_changed","arc_1","generator","_generator","_display","middleAngle","markDirtyPosition","Graphics","Slice","_renderer","makeRadialText","textStyle","clear","markDirtyBounds","inside","kerning","Text","RadialText","_textKeys","_text","radiusPrivate","getPrivate","innerRadiusPrivate","baseRadius","isPrivateDirty","orientation_1","labelAngle","angle","_flipped","_dirty","localBounds","_updatePosition","RadialLabel","Label","ListTemplate","Template","themeTags","template","Tick","makeSlice","events","makeLabel","makeTick","labelsTemplate","currentAngle_1","radius_1","innerRadius_1","currentArc","color","_setDefault","setPrivate","labelRadius","isHiding","pl","pr","labelAngle_1","bullet","sprite","PieSeries"],"sourceRoot":""}